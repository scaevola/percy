initSidebarItems({"enum":[["Patch","A `Patch` encodes an operation that modifies a real DOM element."]],"fn":[["diff","Given two VirtualNode's generate Patch's that would turn the old virtual node's real DOM node equivalent into the new VirtualNode's real DOM node equivalent."],["patch","Apply all of the patches to our old root node in order to create the new root node that we desire. This is usually used after diffing two virtual nodes."],["window","Getter for the `Window` object"]],"macro":[["html","A macro which returns a root VirtualNode given some HTML and Rust expressions."],["recurse_html",""]],"mod":[["html_macro","The html_macro module exposes an `html!` macro that is used to generate `VirtualNode`'s that will eventually get rendered into DOM nodes on the client side, or String's if you're on the server side."],["prelude","Exports structs and macros that you'll almost always want access to in a virtual-dom powered application"],["virtual_node_test_utils","A collection of functions that are useful for unit testing your html! views."]],"struct":[["BrowserEvents","We only support event handlers on wasm32 targets at this time. If you have a use case that needs them elsewhere please open an issue!"],["Closure","A handle to both a closure in Rust as well as JS closure which will invoke the Rust closure."],["Comment","The `Comment` object"],["CustomEvents","We need a custom implementation of fmt::Debug since FnMut() doesn't implement debug."],["Document","The `Document` object"],["DomTokenList","The `DOMTokenList` object"],["Element","The `Element` object"],["Event","The `Event` object"],["EventTarget","The `EventTarget` object"],["HtmlCollection","The `HTMLCollection` object"],["HtmlElement","The `HTMLElement` object"],["HtmlInputElement","The `HTMLInputElement` object"],["InputEvent","The `InputEvent` object"],["MouseEvent","The `MouseEvent` object"],["Node","The `Node` object"],["NodeList","The `NodeList` object"],["ParsedVirtualNode","Our html! macro takes in tokens, builds `ParsedVirtualNode`'s from those tokens and then finally converts that `ParsedVirtualNode` into a `VirtualNode`."],["Rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["Text","The `Text` object"],["VirtualNode","When building your views you'll typically use the `html!` macro to generate `VirtualNode`'s."],["Window","The `Window` object"]],"trait":[["View","A trait with common functionality for rendering front-end views."]]});